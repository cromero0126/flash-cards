[
  {
    "question": "Which phase of the SDLC involves gathering and analyzing project requirements?",
    "choices": [
      "Requirements analysis",
      "Testing",
      "Design",
      "Implementation"
    ],
    "correctIndex": 0,
    "explanation": "The Requirements Analysis phase is crucial for defining what the software system needs to do. During this stage, stakeholders' needs are collected, documented, and thoroughly understood to form the foundation for all subsequent development activities."
  },
  {
    "question": "Coupling refers to the level of dependency between software modules.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. Coupling measures how much one software module relies on another. High coupling indicates strong dependencies, which can make systems harder to understand, modify, and test, while low coupling is generally desired for robust and maintainable software."
  },
  {
    "question": "Which SDLC model emphasizes customer collaboration over contract negotiation?",
    "choices": [
      "Agile",
      "Waterfall",
      "Spiral",
      "Incremental"
    ],
    "correctIndex": 0,
    "explanation": "The Agile SDLC model prioritizes continuous customer collaboration throughout the development process. This emphasis ensures that the software evolves to meet changing needs and deliver maximum value, contrasting with more rigid, contract-focused approaches."
  },
  {
    "question": "The process of dividing a software project into smaller, manageable tasks is known as _____.",
    "choices": [
      "Decomposition",
      "Refactoring",
      "Debugging",
      "Optimization"
    ],
    "correctIndex": 0,
    "explanation": "Decomposition involves breaking down a complex problem or project into smaller, more manageable components or tasks. This practice simplifies development, allows for parallel work, and makes it easier to track progress and identify potential issues within each smaller piece."
  },
  {
    "question": "Which role focuses on writing and maintaining the source code?",
    "choices": [
      "Software Developer",
      "Project Manager",
      "System Analyst",
      "UX Designer"
    ],
    "correctIndex": 0,
    "explanation": "A Software Developer is primarily responsible for translating design specifications into executable code. Their duties involve writing, debugging, and maintaining the software's source code, ensuring it functions as intended and meets project requirements."
  },
  {
    "question": "In which SDLC model are prototypes created for client feedback?",
    "choices": [
      "Prototyping",
      "Waterfall",
      "Agile",
      "Spiral"
    ],
    "correctIndex": 0,
    "explanation": "The Prototyping model explicitly involves creating preliminary versions of the software (prototypes) to gather early and iterative feedback from clients. This helps refine requirements and design before full-scale development, reducing the risk of building the wrong product."
  },
  {
    "question": "What is the role of the Project Manager?",
    "choices": [
      "Overseeing the project schedule, budget, and team coordination",
      "Writing technical code",
      "Testing software functionality",
      "Designing system architecture"
    ],
    "correctIndex": 0,
    "explanation": "The Project Manager is central to leading and guiding the software development team. Their responsibilities include defining project goals, creating detailed plans, managing resources and budgets, and ensuring effective communication and coordination among all team members to achieve successful delivery."
  },
  {
    "question": "_____ is the phase of SDLC where the system is thoroughly tested for errors and bugs.",
    "choices": [
      "Testing",
      "Development",
      "Design",
      "Implementation"
    ],
    "correctIndex": 0,
    "explanation": "The Testing phase is a critical stage in the SDLC dedicated to identifying defects, errors, and omissions in the software. Various testing techniques are employed to ensure the system meets specified requirements, performs reliably, and delivers a high-quality user experience."
  },
  {
    "question": "Which SDLC model incorporates risk assessment as a key component?",
    "choices": [
      "Spiral",
      "Waterfall",
      "Agile",
      "Incremental"
    ],
    "correctIndex": 0,
    "explanation": "The Spiral model is renowned for its emphasis on risk management, integrating risk assessment activities into each iteration. This iterative approach allows for systematic identification, analysis, and mitigation of risks throughout the project lifecycle, making it suitable for large and complex endeavors."
  },
  {
    "question": "The primary goal of the SDLC is to ensure structured and efficient software development.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. The Software Development Life Cycle (SDLC) provides a structured framework for managing the entire software development process, from conception to maintenance. Its goal is to deliver high-quality software systematically, within budget, and on schedule, by clearly defining phases and responsibilities."
  },
  {
    "question": "What is Software Engineering?",
    "choices": [
      "Applying systematic engineering principles to software development",
      "Writing code for software",
      "Testing software for errors",
      "Building hardware components"
    ],
    "correctIndex": 0,
    "explanation": "Software Engineering is a systematic, disciplined, and quantifiable approach to the development, operation, and maintenance of software. It applies engineering principles to create high-quality software solutions that are reliable, efficient, and meet user requirements."
  },
  {
    "question": "Who ensures that software quality standards are met through rigorous testing?",
    "choices": [
      "Quality Assurance Tester",
      "Software Developer",
      "System Administrator",
      "Business Analyst"
    ],
    "correctIndex": 0,
    "explanation": "A Quality Assurance (QA) Tester is responsible for systematically verifying that the software meets quality standards and functional requirements. They design and execute test cases, identify defects, and work with the development team to ensure a robust and reliable product before release."
  },
  {
    "question": "Which role focuses on creating visual and interactive elements of a system?",
    "choices": [
      "UX Designer",
      "Software Developer",
      "QA Tester",
      "System Administrator"
    ],
    "correctIndex": 0,
    "explanation": "A UX (User Experience) Designer focuses on enhancing user satisfaction by improving the usability, accessibility, and pleasure provided in the interaction between the user and the product. This involves researching user behaviors, designing intuitive interfaces, and creating engaging experiences."
  },
  {
    "question": "The primary drawback of the Waterfall model is:",
    "choices": [
      "Inability to accommodate changes mid-project",
      "Lack of documentation",
      "High risk of project failure",
      "Low-quality deliverables"
    ],
    "correctIndex": 0,
    "explanation": "The Waterfall model's strict sequential nature makes it highly inflexible to changes once a phase is completed. This rigidity means that accommodating new requirements or correcting early-stage errors late in the project can be costly and disruptive, making it less suitable for dynamic environments."
  },
  {
    "question": "In the Waterfall model, testing occurs only at the end of the development cycle.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. A defining characteristic of the traditional Waterfall model is that testing is a distinct phase that begins only after all development and implementation are complete. This sequential approach means defects found late can be expensive and time-consuming to fix."
  },
  {
    "question": "Which SDLC model is known for its strict sequential approach?",
    "choices": [
      "Waterfall",
      "Agile",
      "Spiral",
      "Iterative"
    ],
    "correctIndex": 0,
    "explanation": "The Waterfall model is characterized by its linear and sequential approach, where each phase must be completed before the next one begins. This strict progression makes it easy to manage but less adaptable to changes that may arise during the project."
  },
  {
    "question": "Who is responsible for translating client requirements into technical specifications?",
    "choices": [
      "Business Analyst",
      "Software Developer",
      "Project Manager",
      "QA Tester"
    ],
    "correctIndex": 0,
    "explanation": "A Business Analyst (BA) serves as a crucial liaison, bridging the gap between business stakeholders and the technical development team. They elicit, analyze, document, and translate high-level client requirements into detailed technical specifications that developers can implement."
  },
  {
    "question": "What is \"Abstraction\" in Software Engineering?",
    "choices": [
      "Ignoring implementation details to focus on functionality",
      "Writing complex code for every task",
      "Avoiding software reuse",
      "Removing features from software"
    ],
    "correctIndex": 0,
    "explanation": "Abstraction in software engineering involves simplifying complex systems by focusing on essential features and hiding unnecessary details. This allows developers to manage complexity, design modular components, and improve the overall readability and maintainability of the code by representing only the relevant information."
  },
  {
    "question": "The term \"Maintainability\" in Software Engineering refers to:",
    "choices": [
      "The ease of modifying software to meet new requirements",
      "The ability to run on multiple platforms",
      "The time it takes to complete a project",
      "The aesthetics of the user interface"
    ],
    "correctIndex": 0,
    "explanation": "Maintainability is a critical quality attribute of software, indicating how easily the software can be modified, adapted, or repaired after deployment. Highly maintainable software is easier to debug, enhance, and evolve over its lifecycle, leading to lower long-term costs."
  },
  {
    "question": "A DevOps Engineer is primarily responsible for:",
    "choices": [
      "Managing software releases and automation",
      "Designing user interfaces",
      "Writing technical documentation",
      "Creating test cases"
    ],
    "correctIndex": 0,
    "explanation": "A DevOps Engineer plays a key role in bridging the gap between development and operations teams. They focus on automating the software delivery pipeline, managing infrastructure, and ensuring seamless integration and continuous deployment, thereby streamlining software releases and improving operational efficiency."
  },
  {
    "question": "What is the primary responsibility of a Software Architect?",
    "choices": [
      "Designing the high-level structure of the software system",
      "Writing and debugging code",
      "Creating marketing materials",
      "Testing for software bugs"
    ],
    "correctIndex": 0,
    "explanation": "A Software Architect defines the overall structure of a software system, including its components, their relationships, and the principles and guidelines governing its design and evolution. They make critical decisions about technology choices and architectural patterns to ensure scalability, reliability, and maintainability."
  },
  {
    "question": "What does a Scrum Master facilitate in Agile projects?",
    "choices": [
      "Team communication and adherence to Agile practices",
      "Client relations",
      "Designing user interfaces",
      "Debugging code"
    ],
    "correctIndex": 0,
    "explanation": "A Scrum Master acts as a facilitator for the Scrum team, ensuring adherence to Agile principles and practices. They remove impediments, coach the team in self-organization and cross-functionality, and foster a collaborative environment to maximize productivity and deliver value."
  },
  {
    "question": "Who is primarily responsible for system deployment and ensuring its availability?",
    "choices": [
      "System Administrator",
      "Database Administrator",
      "Quality Assurance Tester",
      "Business Analyst"
    ],
    "correctIndex": 0,
    "explanation": "The System Administrator is crucial for deploying, configuring, and maintaining the operational infrastructure of software systems. Their role ensures that systems are available, perform optimally, and are securely managed, often involving tasks like server maintenance, network configuration, and user access control."
  },
  {
    "question": "\"Reusability\" in software reduces:",
    "choices": [
      "Development time and cost",
      "Scalability of the project",
      "Testing requirements",
      "Dependency among modules"
    ],
    "correctIndex": 0,
    "explanation": "Software reusability allows developers to use existing components or modules in new applications, significantly reducing development time and costs. By leveraging previously built and tested code, it also enhances reliability and speeds up the delivery of new software features."
  },
  {
    "question": "The Agile model is best suited for:",
    "choices": [
      "Dynamic and evolving requirements",
      "Projects with clearly defined requirements from the start",
      "Small-scale projects only",
      "Projects requiring minimal client interaction"
    ],
    "correctIndex": 0,
    "explanation": "The Agile model thrives in environments where requirements are expected to change frequently or are not fully defined at the outset. Its iterative and flexible nature allows teams to adapt to evolving needs, incorporating feedback continuously and delivering value in small, incremental releases."
  },
  {
    "question": "Who handles version control and code integration?",
    "choices": [
      "Configuration Manager",
      "Quality Assurance Tester",
      "System Analyst",
      "Software Developer"
    ],
    "correctIndex": 0,
    "explanation": "A Configuration Manager is responsible for managing changes to software configurations, including source code, documentation, and other project assets. They ensure proper version control, facilitate code integration, and maintain the integrity and traceability of the software throughout its lifecycle."
  },
  {
    "question": "One of the main characteristics of software is its _____, which allows changes to be made post-deployment.",
    "choices": [
      "Maintainability",
      "Scalability",
      "Portability",
      "Robustness"
    ],
    "correctIndex": 0,
    "explanation": "Maintainability refers to the ease with which software can be modified to correct errors, improve performance, or adapt to changes in the environment or requirements after it has been deployed. This characteristic is crucial for the long-term viability and evolution of any software system."
  },
  {
    "question": "The Incremental model delivers:",
    "choices": [
      "Software in small, workable increments",
      "Fully functional software in a single phase",
      "Software after comprehensive testing",
      "High-risk projects with detailed risk assessments"
    ],
    "correctIndex": 0,
    "explanation": "The Incremental model breaks down the software development process into a series of smaller, sequential iterations. Each increment builds upon the previous one, delivering a functional subset of the overall system to the client in stages, allowing for early feedback and gradual feature rollout."
  },
  {
    "question": "Who acts as the bridge between the development team and clients?",
    "choices": [
      "Business Analyst",
      "UX Designer",
      "System Analyst",
      "Software Developer"
    ],
    "correctIndex": 0,
    "explanation": "A Business Analyst (BA) acts as the crucial liaison, translating stakeholder needs and business requirements into clear, actionable specifications for the development team. They ensure that the technical solution aligns with business goals and client expectations, facilitating smooth communication and understanding."
  },
  {
    "question": "What does software quality refer to?",
    "choices": [
      "Meeting customer expectations and functional requirements",
      "The amount of code written",
      "High salaries of developers",
      "Using the latest technologies"
    ],
    "correctIndex": 0,
    "explanation": "Software quality is multifaceted, primarily referring to how well a software product meets its specified functional and non-functional requirements, and satisfies the explicit and implicit needs of its users. It encompasses aspects like reliability, usability, efficiency, and maintainability."
  },
  {
    "question": "Which is NOT a characteristic of good software?",
    "choices": [
      "High cost",
      "Usability",
      "Scalability",
      "Reliability"
    ],
    "correctIndex": 0,
    "explanation": "While software development involves costs, 'high cost' itself is not a characteristic of *good* software. Instead, good software is characterized by attributes like usability, scalability, and reliability, which contribute to its value and effectiveness in meeting user needs and performing its intended functions efficiently."
  },
  {
    "question": "_____ is the process for capturing the functionality and requirements of a software system.",
    "choices": [
      "Requirements analysis",
      "Coding",
      "Testing",
      "Deployment"
    ],
    "correctIndex": 0,
    "explanation": "Requirements analysis is the foundational phase where the specific functionalities, constraints, and user expectations for a software system are systematically gathered, documented, and refined. This meticulous process ensures that the development team has a clear understanding of 'what' needs to be built."
  },
  {
    "question": "Which layer in software development focuses on user interaction?",
    "choices": [
      "Presentation layer",
      "Application logic layer",
      "Database layer",
      "Integration layer"
    ],
    "correctIndex": 0,
    "explanation": "The presentation layer, also known as the user interface (UI) layer, is responsible for how the system interacts with users. It handles the visual display of information and captures user input, serving as the primary point of interaction within a multi-tiered software architecture."
  },
  {
    "question": "Which requirement category includes features like user authentication and report generation?",
    "choices": [
      "Functional requirements",
      "Non-functional requirements",
      "Operational requirements",
      "Security requirements"
    ],
    "correctIndex": 0,
    "explanation": "Functional requirements define what the system *does* to fulfill user needs, encompassing specific features and behaviors. User authentication and report generation are clear examples of such features, outlining the distinct actions the software must perform."
  },
  {
    "question": "Surveys are less structured than interviews for gathering requirements.",
    "choices": [
      "False",
      "True"
    ],
    "correctIndex": 0,
    "explanation": "False. Surveys are generally more structured than interviews, using predefined questions to gather consistent data from a larger audience. Interviews, by contrast, offer more flexibility for probing deeper and exploring nuanced perspectives through open-ended conversations."
  },
  {
    "question": "What does a use case diagram primarily depict?",
    "choices": [
      "Interactions between users and the system",
      "Data flow in the system",
      "System hardware architecture",
      "Non-functional requirements"
    ],
    "correctIndex": 0,
    "explanation": "A use case diagram provides a high-level view of how different users, or 'actors', interact with a system to achieve specific goals. It illustrates the primary functions the system performs from the perspective of its external users, without delving into internal implementation details."
  },
  {
    "question": "Verification ensures that the requirements are correct and complete.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. Verification is the process of confirming that the requirements are well-formed, consistent, and adhere to defined standards. It ensures that 'we are building the product right' by checking the quality of the requirements themselves before development proceeds."
  },
  {
    "question": "____________ helps prioritize requirements by analyzing their impact and feasibility.",
    "choices": [
      "Feasibility studies",
      "Prototyping",
      "Requirement workshops",
      "Document analysis"
    ],
    "correctIndex": 0,
    "explanation": "Feasibility studies are conducted early in a project to assess the practicality and viability of proposed requirements. They analyze technical, economic, legal, operational, and schedule aspects to determine if a requirement can realistically be implemented, thus aiding in prioritization based on impact and feasibility."
  },
  {
    "question": "What is the primary goal of requirements validation?",
    "choices": [
      "Confirm requirements meet user needs",
      "Ensure system requirements are testable",
      "Align requirements with software design",
      "Prioritize high-risk requirements"
    ],
    "correctIndex": 0,
    "explanation": "Requirements validation focuses on ensuring that the gathered and documented requirements accurately reflect the real needs and expectations of the stakeholders and end-users. Its goal is to confirm that 'we are building the *right* product' that will solve the intended problem or fulfill the business objective."
  },
  {
    "question": "Which activity is NOT part of validation?",
    "choices": [
      "Debugging code errors",
      "Prototyping feedback",
      "Cross-functional collaboration",
      "Stakeholder review meetings"
    ],
    "correctIndex": 0,
    "explanation": "Requirements validation focuses on confirming the correctness and completeness of the requirements themselves, often through activities like prototyping feedback and stakeholder reviews. Debugging code errors, however, is a part of the *testing* and *implementation* phases of software development, occurring much later."
  },
  {
    "question": "Which of these techniques is best for understanding user pain points?",
    "choices": [
      "Observation",
      "Document analysis",
      "Brainstorming",
      "Surveys"
    ],
    "correctIndex": 0,
    "explanation": "Observation, particularly ethnographic observation, involves watching users perform their tasks in their natural environment. This direct method is highly effective for uncovering unspoken needs, identifying inefficiencies, and revealing actual 'pain points' that users might not explicitly articulate in interviews or surveys."
  },
  {
    "question": "In document analysis, what type of document is typically NOT analyzed?",
    "choices": [
      "Test case documents",
      "Stakeholder meeting notes",
      "User training guides",
      "Existing system manuals"
    ],
    "correctIndex": 0,
    "explanation": "Document analysis involves reviewing existing documentation to glean information about current processes, systems, and constraints. While existing system manuals, stakeholder meeting notes, and user training guides provide valuable context, 'test case documents' are typically an *output* of the requirements and design phases, rather than a source for initial analysis."
  },
  {
    "question": "Peer reviews and inspections are common methods of ____________.",
    "choices": [
      "Verification",
      "Validation",
      "Prioritization",
      "Risk analysis"
    ],
    "correctIndex": 0,
    "explanation": "Peer reviews and inspections are verification techniques focused on checking artifacts like requirements documents, design specifications, or code for defects and adherence to standards. They are systematic checks to ensure that the product is being built *correctly* according to the specifications."
  },
  {
    "question": "Which of the following is an example of a functional requirement?",
    "choices": [
      "Users must be able to reset their passwords via email.",
      "The system must process transactions in under 2 seconds.",
      "The database must support up to 10 million records.",
      "The system must be available 24/7."
    ],
    "correctIndex": 0,
    "explanation": "A functional requirement specifies a particular function or service that the system must perform. The ability for users to reset passwords via email is a direct statement of such a capability, contrasting with the non-functional aspects of performance, scalability, or availability."
  },
  {
    "question": "Which elicitation technique focuses on creating a shared understanding of system requirements among all stakeholders?",
    "choices": [
      "Workshops",
      "Surveys",
      "Prototyping",
      "Observation"
    ],
    "correctIndex": 0,
    "explanation": "Requirements workshops are highly collaborative sessions designed to bring together diverse stakeholders to discuss, clarify, and collectively agree upon system requirements. This interactive environment fosters a shared understanding and helps resolve ambiguities much more efficiently than individual elicitation methods."
  },
  {
    "question": "Functional requirements define \"what\" a system does, while non-functional requirements define \"how\" it performs.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. This distinction is fundamental in software engineering. Functional requirements describe the specific actions or services the system must provide (the 'what'), such as generating a report or processing a payment. Non-functional requirements, on the other hand, specify quality attributes and constraints (the 'how'), like performance speed, security levels, or usability."
  },
  {
    "question": "Non-functional requirements include performance, security, and scalability.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. Non-functional requirements (NFRs) are crucial attributes that define the quality and overall effectiveness of a system, but not its specific functions. Performance (e.g., response time), security (e.g., access control), and scalability (e.g., handling increased load) are all classic examples of NFRs that dictate how well the system operates."
  },
  {
    "question": "What is the primary purpose of a use case in UML?",
    "choices": [
      "To document functional requirements",
      "To define non-functional requirements",
      "To validate system performance",
      "To specify testing criteria"
    ],
    "correctIndex": 0,
    "explanation": "In UML, a use case serves as a technique to capture and document functional requirements from the user's perspective. Each use case describes a specific goal an actor achieves through interaction with the system, detailing the steps involved without specifying internal implementation."
  },
  {
    "question": "UML diagrams are essential for software design and development.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. Unified Modeling Language (UML) diagrams provide a standardized visual notation for specifying, visualizing, constructing, and documenting the artifacts of a software system. They are invaluable tools for communicating complex designs, analyzing requirements, and planning development, making them essential throughout the software lifecycle."
  },
  {
    "question": "What term describes the specific functionality provided by the system to satisfy user needs?",
    "choices": [
      "Functional requirement",
      "Non-functional requirement",
      "Design specification",
      "Validation criteria"
    ],
    "correctIndex": 0,
    "explanation": "A functional requirement explicitly describes a specific action or service that a software system must perform to meet a user's need. These requirements define the system's behavior and what it is supposed to do, such as 'The system shall allow users to log in'."
  },
  {
    "question": "What diagram type is best suited for showing object behaviors?",
    "choices": [
      "State diagram",
      "Component diagram",
      "Use case diagram",
      "Deployment diagram"
    ],
    "correctIndex": 0,
    "explanation": "A state diagram, or state machine diagram, is specifically designed to model the various states an object can have and the transitions between those states in response to events. This makes it ideal for depicting the dynamic behavior of individual objects over their lifetime."
  },
  {
    "question": "Which technique combines drawing and collaboration to create early models of a system?",
    "choices": [
      "Prototyping",
      "Use case diagrams",
      "Observation",
      "Data flow diagrams"
    ],
    "correctIndex": 0,
    "explanation": "Prototyping involves building early, incomplete versions of a system or specific features to gather feedback and refine requirements and design. It often includes drawing mockups or creating interactive models, fostering collaboration with stakeholders to visualize and validate ideas before full development."
  },
  {
    "question": "A use case diagram consists of actors, ________, and their relationships.",
    "choices": [
      "Use cases",
      "Classes",
      "Objects",
      "Components"
    ],
    "correctIndex": 0,
    "explanation": "A use case diagram is fundamentally composed of actors (external entities interacting with the system) and use cases (the functions or services the system provides to these actors). The lines connecting them represent the relationships and interactions that define the system's external behavior."
  },
  {
    "question": "Which of these best describes a class diagram?",
    "choices": [
      "It represents system structure and relationships between classes.",
      "It shows user interactions with the system.",
      "It depicts system states and transitions.",
      "It visualizes the modular components of the system."
    ],
    "correctIndex": 0,
    "explanation": "A class diagram is a foundational UML structural diagram that illustrates the static structure of a system. It shows the classes, their attributes, operations (methods), and the relationships between them, such as associations, generalizations, and dependencies, providing a blueprint for the system's data and behavior."
  },
  {
    "question": "Requirements validation focuses on ensuring the software will meet the user's expectations, while verification ensures that the software is built correctly.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. This statement accurately distinguishes between validation and verification. Validation answers the question 'Are we building the *right* product?' by ensuring requirements align with user needs. Verification answers 'Are we building the product *right*?' by checking if the software conforms to its specifications and standards."
  },
  {
    "question": "Which UML diagram best represents object interactions over time?",
    "choices": [
      "Sequence diagram",
      "Use case diagram",
      "Class diagram",
      "State diagram"
    ],
    "correctIndex": 0,
    "explanation": "A sequence diagram is a UML interaction diagram that visually represents the order of messages exchanged between objects or components over time. It's particularly useful for modeling the logic of a use case, showing the exact sequence of events that occur to achieve a specific outcome."
  },
  {
    "question": "Which of these requirements would fall under \"usability\"?",
    "choices": [
      "The user shall interact with an intuitive graphical interface.",
      "The system must validate passwords for security.",
      "The database must recover from crashes within 1 hour.",
      "The application must log user activities."
    ],
    "correctIndex": 0,
    "explanation": "Usability is a non-functional requirement that relates to how easy and pleasant a system is to use. An intuitive graphical interface directly addresses usability, aiming to minimize user effort and maximize user satisfaction when interacting with the software."
  },
  {
    "question": "Which of the following is a functional requirement?",
    "choices": [
      "The user shall log in with a username and password",
      "System uptime must be 99.9%",
      "The system should support 1000 simultaneous users",
      "Response time should not exceed 2 seconds"
    ],
    "correctIndex": 0,
    "explanation": "Functional requirements define specific behaviors or functions that a system must exhibit. The ability for a user to log in with credentials is a core functional aspect of many systems, dictating a particular interaction and outcome. The other options describe quality attributes, making them non-functional requirements."
  },
  {
    "question": "Which tool is commonly used in validation?",
    "choices": [
      "Prototyping tools",
      "Version control systems",
      "Integrated Development Environments (IDEs)",
      "Performance monitoring software"
    ],
    "correctIndex": 0,
    "explanation": "Prototyping tools are commonly used in the validation phase because they allow for the creation of mock-ups or partial implementations of the system. These prototypes can be presented to stakeholders and end-users to gather early feedback and confirm that the proposed requirements align with their actual needs and expectations."
  },
  {
    "question": "What is the role of a requirements traceability matrix in verification?",
    "choices": [
      "Maps requirements to corresponding test cases",
      "Tracks bugs in testing phases",
      "Ensures stakeholders agree on priorities",
      "Records meeting minutes"
    ],
    "correctIndex": 0,
    "explanation": "A requirements traceability matrix (RTM) is a powerful tool in verification as it establishes clear links between requirements and other artifacts like design elements, code modules, and especially test cases. This mapping ensures that every requirement is tested and that all tests cover specified functionalities, thereby verifying compliance and completeness."
  },
  {
    "question": "____________ is a group-based technique for generating ideas and clarifying requirements.",
    "choices": [
      "Brainstorming",
      "Focus groups",
      "Observation",
      "Interviews"
    ],
    "correctIndex": 0,
    "explanation": "Brainstorming is a dynamic group technique used to generate a large number of ideas in a short period, often to identify potential requirements or solutions. It encourages free thinking and collaboration among participants, helping to uncover diverse perspectives and clarify complex aspects of a system."
  },
  {
    "question": "What is the primary objective of focus groups in requirements elicitation?",
    "choices": [
      "To gather diverse stakeholder opinions",
      "To test software performance",
      "To validate system requirements",
      "To document user stories"
    ],
    "correctIndex": 0,
    "explanation": "Focus groups are a qualitative research method used to elicit a wide range of opinions, perceptions, and attitudes from a selected group of stakeholders. They facilitate discussion and interaction among participants, providing rich insights into their collective needs and perspectives on system requirements."
  },
  {
    "question": "In a use case diagram, ________ are the external entities interacting with the system.",
    "choices": [
      "Actors",
      "Components",
      "Classes",
      "Objects"
    ],
    "correctIndex": 0,
    "explanation": "In a use case diagram, 'actors' represent the roles that users or other external systems play when interacting with the system under consideration. They initiate use cases and are crucial for defining the boundaries and functionality of the system from an external perspective."
  },
  {
  "question": "____________ ensures that system requirements align with customer expectations.",
  "choices": [
    "Validation",
    "Verification",
    "Unit testing",
    "Design testing"
  ],
  "correctIndex": 0,
  "explanation": "Validation is the process of evaluating software during or at the end of the development process to determine whether it satisfies specified requirements. In the context of requirements, validation ensures that the gathered requirements truly reflect the needs and expectations of the customer and stakeholders, thereby confirming that 'we are building the right product.'"
  },
    {
    "question": "Which UML diagram is used to visualize the interaction between a system and external actors?",
    "choices": [
      "Use case diagram",
      "Deployment diagram",
      "Sequence diagram",
      "Activity diagram"
    ],
    "correctIndex": 0,
    "explanation": "A Use Case diagram provides a high-level visual representation of how users (actors) interact with a system to achieve specific goals. It focuses on the external behavior of the system, defining its boundaries and primary functions from the user's perspective."
  },
  {
    "question": "Which UML diagram is most suitable for showing the flow of control or data within a process?",
    "choices": [
      "Activity diagram",
      "Sequence diagram",
      "Use case diagram",
      "Class diagram"
    ],
    "correctIndex": 0,
    "explanation": "An Activity diagram is specifically designed to model the step-by-step flow of activities and decisions within a process or workflow. It is excellent for visualizing business processes, operational workflows, and the control flow of a system."
  },
  {
    "question": "A ________ diagram shows the flow of activities in a system and decision points.",
    "choices": [
      "Activity",
      "Sequence",
      "Use case",
      "Class"
    ],
    "correctIndex": 0,
    "explanation": "An Activity diagram is a behavioral diagram in UML that illustrates the flow of activities, actions, and decision points within a system. It's often used to model workflows, business processes, and the logic of complex operations."
  },
  {
    "question": "Which GRASP principle deals with assigning responsibility to ensure system behavior is controlled by a central entity?",
    "choices": [
      "Controller",
      "Creator",
      "Polymorphism",
      "Indirection"
    ],
    "correctIndex": 0,
    "explanation": "The Controller GRASP principle assigns the responsibility of handling system events (like user interface events or system operations) to a single, central object. This centralizes control, reducing coupling and making the system easier to manage and understand."
  },
  {
    "question": "What is the main advantage of using GRASP principles in software design?",
    "choices": [
      "They guide the assignment of responsibilities within a system",
      "They offer standardized testing tools",
      "They enhance software maintenance techniques",
      "They reduce hardware dependencies"
    ],
    "correctIndex": 0,
    "explanation": "GRASP (General Responsibility Assignment Software Patterns) principles are foundational guidelines for assigning responsibilities to classes and objects during object-oriented design. They help in creating highly cohesive and loosely coupled systems, leading to more maintainable, flexible, and understandable software."
  },
  {
    "question": "Which of the following is a principle of good software design?",
    "choices": [
      "High cohesion and low coupling",
      "High coupling and low cohesion",
      "High cohesion and high coupling",
      "Low cohesion and low coupling"
    ],
    "correctIndex": 0,
    "explanation": "Good software design aims for high cohesion (where elements within a module work closely together for a single, well-defined purpose) and low coupling (where modules are as independent as possible). This combination leads to systems that are easier to understand, test, maintain, and reuse."
  },
  {
    "question": "UML activity diagrams are used to model ________.",
    "choices": [
      "Workflow and decision-making processes",
      "The relationships between classes",
      "The interaction between objects",
      "Deployment strategies"
    ],
    "correctIndex": 0,
    "explanation": "UML Activity diagrams are specifically used to describe the dynamic aspects of a system, focusing on the flow of control from activity to activity. They are ideal for modeling workflows, business processes, and the decision logic within a system."
  },
  {
    "question": "________ diagrams are used in UML to describe the structure of a system.",
    "choices": [
      "Class",
      "Activity",
      "Sequence",
      "Use case"
    ],
    "correctIndex": 0,
    "explanation": "Class diagrams are fundamental structural diagrams in UML. They define the static structure of a system by showing its classes, their attributes, operations, and the relationships between them, such as associations, generalizations (inheritance), and dependencies."
  },
  {
    "question": "The principle of \"Separation of Concerns\" in software design aims to:",
    "choices": [
      "Separate different aspects of a program to reduce complexity",
      "Break down complex systems into unrelated components",
      "Divide a program into distinct features that overlap in functionality",
      "Ensure all modules share the same responsibilities"
    ],
    "correctIndex": 0,
    "explanation": "The Separation of Concerns principle advocates for dividing a system into distinct sections, each addressing a specific concern (or responsibility). This approach helps manage complexity, improves modularity, and makes the system easier to develop, test, and maintain."
  },
  {
    "question": "In the context of cohesion, what does \"functional cohesion\" mean?",
    "choices": [
      "All operations within a module contribute to a single task.",
      "A module focuses on unrelated tasks.",
      "A module uses global variables extensively.",
      "Operations in a module are unrelated."
    ],
    "correctIndex": 0,
    "explanation": "Functional cohesion is the highest and most desirable type of cohesion. It means that all elements (operations, attributes) within a module are essential for and contribute directly to performing a single, well-defined task or function, ensuring the module has a clear and focused purpose."
  },
  {
    "question": "Which GRASP principle focuses on creating reusable objects and reduces redundancy in the system?",
    "choices": [
      "Pure Fabrication",
      "Polymorphism",
      "Creator",
      "Information Expert"
    ],
    "correctIndex": 0,
    "explanation": "Pure Fabrication is a GRASP principle that suggests creating a class that does not represent a domain concept but is designed specifically to achieve high cohesion and low coupling. Such 'fabricated' classes are often highly reusable as they encapsulate specific behaviors that might otherwise be scattered or violate the Information Expert principle."
  },
  {
    "question": "In UML, what does a solid line with a filled arrowhead represent in a class diagram?",
    "choices": [
      "Generalization",
      "Dependency",
      "Aggregation",
      "Association"
    ],
    "correctIndex": 0,
    "explanation": "In a UML Class diagram, a solid line with a filled, triangular arrowhead pointing from the subclass to the superclass represents Generalization (inheritance). It signifies an 'is-a' relationship, where the subclass inherits properties and behaviors from the superclass."
  },
  {
    "question": "Which design pattern allows an object to change its behavior when its internal state changes?",
    "choices": [
      "State",
      "Singleton",
      "Decorator",
      "Observer"
    ],
    "correctIndex": 0,
    "explanation": "The State design pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class, as it encapsulates state-specific behavior into separate state classes, making it easier to manage complex state-dependent logic."
  },
  {
    "question": "What is the main goal of the Open-Closed Principle in software design?",
    "choices": [
      "Software entities should be open for extension but closed for modification.",
      "Software entities should depend on abstractions rather than concretions.",
      "Subclasses should replace parent classes without breaking functionality.",
      "Classes should have only one reason to change."
    ],
    "correctIndex": 0,
    "explanation": "The Open-Closed Principle (OCP) is a core SOLID principle stating that software entities (classes, modules, functions, etc.) should be open for extension (meaning new functionality can be added) but closed for modification (meaning existing code should not be changed). This promotes stable and maintainable codebases."
  },
  {
    "question": "________ diagrams in UML are used to show the runtime interaction between objects.",
    "choices": [
      "Sequence",
      "Use case",
      "Activity",
      "Class"
    ],
    "correctIndex": 0,
    "explanation": "Sequence diagrams are interaction diagrams in UML that depict the order of messages exchanged between objects or components in a system over time. They are excellent for visualizing the dynamic behavior and flow of control within a specific scenario or use case."
  },
  {
    "question": "The \"Information Expert\" GRASP principle assigns responsibilities to the class with the most information required.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. The Information Expert GRASP principle advocates assigning a responsibility to the class that has the necessary information to fulfill that responsibility. This principle leads to highly cohesive classes by keeping related data and behavior together."
  },
  {
    "question": "The ________ design principle encourages depending on abstractions rather than concretions.",
    "choices": [
      "Dependency Inversion",
      "Interface Segregation",
      "Single Responsibility",
      "Open-Closed"
    ],
    "correctIndex": 0,
    "explanation": "The Dependency Inversion Principle (DIP) is a SOLID principle that states high-level modules should not depend on low-level modules; both should depend on abstractions. Additionally, abstractions should not depend on details; details should depend on abstractions. This promotes flexible and loosely coupled architectures."
  },
  {
    "question": "What is the primary goal of minimizing coupling in a software system?",
    "choices": [
      "To make modules independent of each other",
      "To optimize system performance through tighter integration",
      "To ensure seamless communication between all components",
      "To simplify debugging by increasing modular interconnections"
    ],
    "correctIndex": 0,
    "explanation": "Minimizing coupling (loose coupling) means reducing the interdependencies between software modules. The primary goal is to make modules more independent, which improves reusability, testability, and maintainability, as changes in one module are less likely to impact others."
  },
  {
    "question": "The Singleton pattern can lead to issues in multithreaded environments if not implemented carefully.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. In a multithreaded environment, multiple threads might attempt to create an instance of a Singleton class simultaneously, leading to multiple instances being created (violating the pattern) if proper synchronization mechanisms (like locks or double-checked locking) are not used."
  },
  {
    "question": "The term \"tight coupling\" in software design means:",
    "choices": [
      "Modules are heavily dependent on one another",
      "Modules have distinct and well-defined boundaries",
      "Code can be reused across different systems",
      "Testing becomes easier"
    ],
    "correctIndex": 0,
    "explanation": "Tight coupling occurs when modules are highly interdependent, meaning changes in one module often necessitate changes in others. This makes the system more rigid, harder to understand, test, and maintain, and reduces reusability."
  },
  {
    "question": "What is the main benefit of using UML diagrams in software design?",
    "choices": [
      "They simplify communication among stakeholders.",
      "They eliminate the need for documentation.",
      "They enhance the runtime performance of software.",
      "They automate the testing process."
    ],
    "correctIndex": 0,
    "explanation": "UML diagrams provide a standardized visual language for modeling software systems. This visual representation significantly simplifies communication among developers, architects, business analysts, and other stakeholders, helping everyone understand the system's requirements, design, and behavior more effectively."
  },
  {
    "question": "Which UML diagram is most useful for representing object interactions over time?",
    "choices": [
      "Sequence diagram",
      "Class diagram",
      "Component diagram",
      "Deployment diagram"
    ],
    "correctIndex": 0,
    "explanation": "A Sequence diagram is an interaction diagram that shows the order in which messages are sent between objects. It emphasizes the time-ordered sequence of interactions, making it ideal for visualizing the dynamic behavior of a system or a specific scenario over time."
  },
  {
    "question": "The ________ pattern ensures that a class has only one instance and provides a global point of access to it.",
    "choices": [
      "Singleton",
      "Factory",
      "Observer",
      "Adapter"
    ],
    "correctIndex": 0,
    "explanation": "The Singleton design pattern restricts the instantiation of a class to a single object. It ensures that only one instance of the class exists throughout the application's lifecycle and provides a global access point to that instance."
  },
  {
    "question": "The Observer pattern allows one-to-many dependencies between objects.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. The Observer pattern defines a one-to-many dependency between objects so that when one object (the subject) changes state, all its dependents (observers) are notified and updated automatically. This pattern is fundamental for implementing distributed event handling systems."
  },
  {
    "question": "________ design principle states that a module should only have one reason to change.",
    "choices": [
      "Single Responsibility",
      "Open-Closed",
      "Liskov Substitution",
      "Dependency Inversion"
    ],
    "correctIndex": 0,
    "explanation": "The Single Responsibility Principle (SRP) is a SOLID principle that states a class or module should have only one reason to change. This means each module should be responsible for a single, well-defined piece of functionality, leading to more cohesive and maintainable code."
  },
  {
    "question": "Which software architecture pattern divides a system into three interconnected layers: Presentation, Application, and Data?",
    "choices": [
      "Layered architecture",
      "Event-driven architecture",
      "Microservices",
      "Model-View-Controller (MVC)"
    ],
    "correctIndex": 0,
    "explanation": "Layered architecture, often referred to as N-tier architecture, typically organizes a system into distinct horizontal layers, with the most common being Presentation (UI), Application (business logic), and Data (data access). Each layer has specific responsibilities and communicates only with the layers directly above and below it."
  },
  {
    "question": "The Adapter design pattern is used to convert the interface of a class into another interface the client expects.",
    "choices": [
      "True",
      "False"
    ],
    "correctIndex": 0,
    "explanation": "True. The Adapter design pattern (also known as Wrapper) acts as a bridge between two incompatible interfaces. It allows objects with incompatible interfaces to collaborate, converting the interface of one class into another interface clients expect, without changing the existing classes."
  },
  {
    "question": "________ patterns are templates for solving common design problems in software systems.",
    "choices": [
      "Design",
      "Architecture",
      "Workflow",
      "Behavioral"
    ],
    "correctIndex": 0,
    "explanation": "Design patterns are generalized, reusable solutions to common problems encountered during software design. They are not direct solutions but rather templates or blueprints that can be adapted to various situations to create robust, flexible, and maintainable software systems."
  },
  {
    "question": "Which UML diagram is primarily used to model the dynamic behavior of a system?",
    "choices": [
      "Sequence diagram",
      "Class diagram",
      "Component diagram",
      "Deployment diagram"
    ],
    "correctIndex": 0,
    "explanation": "Sequence diagrams are UML behavioral diagrams that illustrate the dynamic behavior of a system by showing the order of interactions between objects over time. They are crucial for understanding how objects collaborate to perform a specific function or use case."
  }
]
